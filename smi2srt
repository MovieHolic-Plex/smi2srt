#!/usr/bin/python3
import codecs
import re
import chardet
import os
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-l", "--language", help="choose language to convert", default="kr")
parser.add_argument("dir", help="target directory. ex) ./smi2srt -t ./Movies", default="./")

args = parser.parse_args()

PATH = args.dir
LANG = args.language.upper()+"CC"

def parse(smi): # smi parsing algorithm written in PYSAMI by g6123 (https://github.com/g6123/PySAMI)
    search = lambda string, pattern: re.search(pattern, string, flags=re.I)

    def split_content(string, tag):
        threshold = '<'+tag

        return list(map(
            lambda item: (threshold+item).strip(),
            re.split(threshold, string, flags=re.I)
        ))[1:]

    def parse_p(item):
        lang = search(item, '<p(.+)class=([a-z]+)').group(2)

        content = item[search(item, '<p(.+)>').end():]
        content = content.replace('\n', '')
        content = re.sub('<br ?/?>', '\n', content, flags=re.I)
        content = re.sub('<.*?>','', content)
        content = content.strip()

        return [lang, content]

    data = []

    try:
        for item in split_content(smi, 'sync'):

            timecode = search(item, '<sync start=([0-9]+)').group(1)
            content = dict(map(parse_p, split_content(item, 'p')))

            data.append([timecode, content])
    except:
        raise ConversionError(-3)
    return data

def convert(data, lang): # written by ncianeo
    def ms_to_ts(time):
        time = int(time)
        ms = time%1000
        s = int(time/1000)%60
        m = int(time/1000/60)%60
        h = int(time/1000/60/60)
        return (h,m,s,ms)
    # smi sync info checking
    nb = [int(d[0]) for d in data]
    if nb[:-1]!=sorted(nb[:-1]):
        print('this smi file is broken')
        return ''
    else:
        srt=''
        for i in range(len(data)-1):
            srt+=str(i+1)+'\n'
            srt+='%02d:%02d:%02d,%03d' %ms_to_ts(data[i][0])+' --> '+'%02d:%02d:%02d,%03d\n' %ms_to_ts(data[i+1][0])
            content=data[i][1][lang]
            if content!='&nbsp;':
                srt+=content+'\n\n'
            else:
                srt+='\n\n'
        return srt

print("media library path:", PATH)
success=[]
fail=[]
print("finding and converting started...")
for p,w,f in os.walk(PATH):
    for file_name in f:
        if file_name[-4:].lower()=='.smi':
            print('processing %s' %os.path.join(p,file_name))
            with open(os.path.join(p,file_name),'rb') as smi_file:
                smi_raw = smi_file.read()
                encoding = chardet.detect(smi_raw[:20000])
            smi = smi_raw.decode(encoding['encoding'])
            srt_file = codecs.open(os.path.join(p,os.path.splitext(file_name)[0]+'.srt'),'w',encoding='utf-8')
            srt_file.write(convert(parse(smi),LANG))
            success.append(file_name)
            #except:
            #    fail.append(file_name)

smi_list = list(set(success) | set(fail))
print('\nfound .smi subtitles:')
for smi in smi_list:
    print(smi)

print('\nworked .smi subtitles:')
for smi in success:
    print(smi)

print('\nfailed .smi subtitles:')
for smi in fail:
    print(smi)
